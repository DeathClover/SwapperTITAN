{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Chris Lytrokapis\\\\Desktop\\\\Dev\\\\Projects\\\\SwapperMaybe\\\\client\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Token from '../contracts/TokenX.json';\nimport Swap from '../contracts/Swap.json';\nimport Navbar from './Navbar';\nimport Main from './Main';\nimport LoadWallet from './LoadWallet';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.buyTokens = async etherAmount => {\n      this.setState({\n        loading: true\n      });\n      await this.state.ethSwap.methods.buyTokens().send({\n        value: etherAmount,\n        from: this.state.account\n      }).on('transactionHash', hash => {\n        this.setState({\n          txState: 'onTxHash'\n        });\n      }).on('confirmation', async (confirmationNumber, receipt) => {\n        this.setState({\n          txState: 'onConfirmation'\n        });\n        const web3 = window.web3;\n        const ethBalance = await web3.eth.getBalance(this.state.account);\n        let tokenBalance = await this.state.token.methods.balanceOf(this.state.account).call();\n        this.setState({\n          ethBalance: ethBalance,\n          tokenBalance: tokenBalance.toString()\n        });\n        console.log(\"BuyTokens.on.Confirmation: ConfirmationNumber: \" + confirmationNumber + \" -> Receip.events: \" + JSON.stringify(receipt));\n      });\n      this.setState({\n        txState: '',\n        loading: false\n      });\n    };\n\n    this.resetBuy = async () => {\n      let amount = Swap.ammount.call();\n      console.log(\"this.state.ethSwap.address: \" + this.state.ethSwap.address);\n      this.setState({\n        loading: true\n      });\n      await this.state.token.methods.approve(this.state.ethSwap.options.address, 1000000).send({\n        from: this.state.account\n      }).on('transactionHash', async hash => {\n        this.setState({\n          txState: 'onTxHash'\n        });\n        await this.state.ethSwap.methods.sellTokens(amount).send({\n          from: this.state.account\n        }).on('transactionHash', hash => {\n          this.setState({\n            txState: 'onTxHash'\n          });\n        }).on('confirmation', async (confirmationNumber, receipt) => {\n          this.setState({\n            txState: 'onConfirmation'\n          });\n          const web3 = window.web3;\n          const ethBalance = await web3.eth.getBalance(this.state.account);\n          let tokenBalance = await this.state.token.methods.balanceOf(this.state.account).call();\n          this.setState({\n            ethBalance: ethBalance,\n            tokenBalance: tokenBalance.toString()\n          });\n          console.log(\"SellTokens.on.Confirmation: ConfirmationNumber: \" + confirmationNumber + \" -> Receip.events: \" + JSON.stringify(receipt));\n        });\n        this.setState({\n          loading: false,\n          txState: ''\n        });\n      });\n    };\n\n    this.sellTokens = async tokenAmount => {\n      console.log(\"this.state.ethSwap.address: \" + this.state.ethSwap.address);\n      this.setState({\n        loading: true\n      });\n      await this.state.token.methods.approve(this.state.ethSwap.options.address, tokenAmount).send({\n        from: this.state.account\n      }).on('transactionHash', async hash => {\n        this.setState({\n          txState: 'onTxHash'\n        });\n        await this.state.ethSwap.methods.sellTokens(tokenAmount).send({\n          from: this.state.account\n        }).on('transactionHash', hash => {\n          this.setState({\n            txState: 'onTxHash'\n          });\n        }).on('confirmation', async (confirmationNumber, receipt) => {\n          this.setState({\n            txState: 'onConfirmation'\n          });\n          const web3 = window.web3;\n          const ethBalance = await web3.eth.getBalance(this.state.account);\n          let tokenBalance = await this.state.token.methods.balanceOf(this.state.account).call();\n          this.setState({\n            ethBalance: ethBalance,\n            tokenBalance: tokenBalance.toString()\n          });\n          console.log(\"SellTokens.on.Confirmation: ConfirmationNumber: \" + confirmationNumber + \" -> Receip.events: \" + JSON.stringify(receipt));\n        });\n        this.setState({\n          loading: false,\n          txState: ''\n        });\n      });\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.state = {\n      account: '',\n      //contract deployer account[0]\n      token: {},\n      //Deployed instance of FUN contract in ROPSTEN\n      ethSwap: {},\n      //Deployed instance of Swap contract in ROPSTEN\n      ethBalance: '0',\n      tokenBalance: '0',\n      loading: true,\n      walletLoaded: false,\n      txState: '',\n      web3Socket: {},\n      ethSwapWebSocket: {},\n      lastReceivedEvent: {\n        'Event': 'no event'\n      }\n    };\n  }\n\n  async loadWallet() {\n    this.setState({\n      loading: true\n    });\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n    await this.loadEthSwapWebSocket(); //subscribe to event TokenPurchased \n\n    await this.state.ethSwapWebSocket.events.TokensPurchased({}).on('data', async event => {\n      let amount = event.returnValues._value.toString();\n\n      window.alert('FUN Token purchased: ' + window.web3.utils.fromWei(amount, 'Ether'));\n      console.log('FUN TokenPurchase tx confirmed \\n');\n      console.log('From account: ', event.returnValues._from.toString());\n      console.log('Amount in FUN: ', window.web3.utils.fromWei(amount, 'Ether'));\n      this.setState({\n        lastReceivedEvent: event.returnValues\n      });\n      console.log(event.returnValues);\n    }).on('error', error => {\n      this.setState({\n        lastReceivedEvent: error\n      });\n      console.log(error);\n    }); //subscribe to event TokenSold\n\n    await this.state.ethSwapWebSocket.events.TokensSold({}).on('data', async event => {\n      let amount = event.returnValues._value.toString();\n\n      window.alert('FUN Token Sold: ' + window.web3.utils.fromWei(amount, 'Ether'));\n      console.log('FUN TokenPurchase tx confirmed \\n');\n      console.log('From account: ', event.returnValues._from.toString());\n      console.log('Amount in FUN: ', window.web3.utils.fromWei(amount, 'Ether'));\n      this.setState({\n        lastReceivedEvent: event.returnValues\n      });\n      console.log(event.returnValues);\n    }).on('error', error => {\n      this.setState({\n        lastReceivedEvent: error\n      });\n      console.log(error);\n    });\n    this.setState({\n      loading: false\n    });\n  } //Load Swap instance via infura webSocket API\n\n\n  async loadEthSwapWebSocket() {\n    const URL = \"wss://ropsten.infura.io/ws/v3/70aea16e9abe4d19a5726cb041c174b4\";\n    let web3Socket = new Web3(new Web3.providers.WebsocketProvider(URL));\n\n    if (web3Socket) {\n      const web3 = window.web3;\n      const networkId = await web3.eth.net.getId();\n      const ethSwapWebSocketData = Swap.networks[networkId];\n\n      if (ethSwapWebSocketData) {\n        const ethSwapWebSocket = await new web3Socket.eth.Contract(Swap.abi, ethSwapWebSocketData.address);\n        this.setState({\n          ethSwapWebSocket\n        });\n      } else {\n        window.alert('Swap contract not deployed to detected network.');\n      }\n    } else {\n      window.alert('Could not establish web socket connection to infura');\n    }\n  } //Load Swap and FUN token instances via Metamask web3\n\n\n  async loadBlockchainData() {\n    const web3 = window.web3;\n    const accounts = await web3.eth.getAccounts();\n    this.setState({\n      account: accounts[0]\n    });\n    console.log(this.state.account);\n    const ethBalance = await web3.eth.getBalance(this.state.account);\n    this.setState({\n      ethBalance\n    }); // Load FUN Token\n\n    const networkId = await web3.eth.net.getId();\n    const tokenData = Token.networks[networkId];\n\n    if (tokenData) {\n      const token = new web3.eth.Contract(Token.abi, tokenData.address);\n      this.setState({\n        token\n      });\n      let tokenBalance = await token.methods.balanceOf(this.state.account).call();\n      this.setState({\n        tokenBalance: tokenBalance.toString()\n      });\n      console.log(\"FUN Token address: \", tokenData.address);\n    } else {\n      window.alert('Token contract not deployed to detected network.');\n    } // Load Swap\n\n\n    const ethSwapData = await Swap.networks[networkId];\n\n    if (ethSwapData) {\n      const ethSwap = new web3.eth.Contract(Swap.abi, ethSwapData.address);\n      this.setState({\n        ethSwap\n      });\n      console.log('ethSwap.options.address:' + this.state.ethSwap.options.address);\n    } else {\n      window.alert('Swap contract not deployed to detected network.');\n    }\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum); //window.web3 = new Web3(\"http://localhost:8545\")\n      //window.web3 = new Web3(new Web3.providers.WebsocketProvider('ws://localhost:8545'))\n\n      await window.ethereum.enable();\n      await window.ethereum.on('accountsChanged', async () => {\n        const accounts = await window.web3.eth.getAccounts();\n        this.setState({\n          account: accounts[0]\n        });\n      });\n      this.setState({\n        walletLoaded: true\n      });\n    } else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n      this.setState({\n        walletLoaded: false\n      });\n    }\n  }\n\n  async handleClick() {\n    if (!this.state.walletLoaded) {\n      await this.loadWallet();\n    } else {\n      this.setState({\n        walletLoaded: false\n      });\n      ;\n    }\n\n    console.log('TypeOf: ', typeof this.state.lastReceivedEvent);\n  }\n\n  render() {\n    let content;\n\n    if (this.state.walletLoaded) {\n      if (this.state.loading) {\n        let txStatus;\n\n        switch (this.state.txState) {\n          case 'onTxHash':\n            txStatus = 'Transaction Hash received from Deployed network...';\n            break;\n\n          case 'onConfirmation':\n            txStatus = 'Confirmation received from Deployed network...';\n            break;\n\n          case 'onReceipt':\n            txStatus = 'Tx receipt received from Deployed network. See console logs...';\n            break;\n\n          case 'onError':\n            txStatus = 'Tx error received from Deployed network. Tx reverted...';\n            break;\n\n          default:\n            txStatus = '';\n        }\n\n        content = React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 260\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          id: \"loader\",\n          className: \"text-center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 261\n          },\n          __self: this\n        }, \"Loading...\"), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 262\n          },\n          __self: this\n        }), React.createElement(\"p\", {\n          className: \"tx\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 263\n          },\n          __self: this\n        }, txStatus));\n      } else {\n        const events = this.state.lastReceivedEvent;\n        content = React.createElement(\"div\", {\n          className: \"row\",\n          style: {\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 268\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"col-md-6\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 274\n          },\n          __self: this\n        }, React.createElement(Main, {\n          ethBalance: this.state.ethBalance,\n          tokenBalance: this.state.tokenBalance,\n          buyTokens: this.buyTokens,\n          resetBuy: this.resetBuy,\n          sellTokens: this.sellTokens,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 275\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"col-md-6\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 283\n          },\n          __self: this\n        }, React.createElement(LoadWallet, {\n          handleClick: this.handleClick,\n          walletLoaded: this.state.walletLoaded,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 284\n          },\n          __self: this\n        }), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 285\n          },\n          __self: this\n        }), \"Last event received from Network:\", React.createElement(\"ul\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 287\n          },\n          __self: this\n        }, Object.keys(events).map((event, index) => React.createElement(\"li\", {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 288\n          },\n          __self: this\n        }, event, \" : \", events[event])))));\n      }\n    } else {\n      content = React.createElement(\"div\", {\n        style: {\n          alignItems: \"center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297\n        },\n        __self: this\n      }, \"Welcome\"), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299\n        },\n        __self: this\n      }, \"Click the button below to connect Metamask wallet.\")), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300\n        },\n        __self: this\n      }, \"Don't forget to select \\\"Ropsten Test Network\\\" in Metamask App.\")), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301\n        },\n        __self: this\n      }, \"If you don\\xB4t own Ether on Ropsten you can request it for free at https://faucet.ropsten.be/.\"))), React.createElement(LoadWallet, {\n        handleClick: this.handleClick,\n        walletLoaded: this.state.walletLoaded,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303\n        },\n        __self: this\n      })));\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      account: this.state.account,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"container-fluid mt-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }, React.createElement(\"main\", {\n      role: \"main\",\n      className: \"col-lg-12 ml-auto mr-auto\",\n      style: {\n        maxWidth: '1000px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"content mr-auto ml-auto\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"Chris_Lytrokapis\",\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }), content, \"console.log(Web3.version);\")))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Chris Lytrokapis/Desktop/Dev/Projects/SwapperMaybe/client/src/components/App.js"],"names":["React","Component","Web3","Token","Swap","Navbar","Main","LoadWallet","App","constructor","props","buyTokens","etherAmount","setState","loading","state","ethSwap","methods","send","value","from","account","on","hash","txState","confirmationNumber","receipt","web3","window","ethBalance","eth","getBalance","tokenBalance","token","balanceOf","call","toString","console","log","JSON","stringify","resetBuy","amount","ammount","address","approve","options","sellTokens","tokenAmount","handleClick","bind","walletLoaded","web3Socket","ethSwapWebSocket","lastReceivedEvent","loadWallet","loadWeb3","loadBlockchainData","loadEthSwapWebSocket","events","TokensPurchased","event","returnValues","_value","alert","utils","fromWei","_from","error","TokensSold","URL","providers","WebsocketProvider","networkId","net","getId","ethSwapWebSocketData","networks","Contract","abi","accounts","getAccounts","tokenData","ethSwapData","ethereum","enable","render","content","txStatus","display","justifyContent","alignItems","Object","keys","map","index","maxWidth"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport Web3 from 'web3'\r\nimport Token from '../contracts/TokenX.json'\r\nimport Swap from '../contracts/Swap.json'\r\nimport Navbar from './Navbar'\r\nimport Main from './Main'\r\nimport LoadWallet from './LoadWallet'\r\nimport './App.css'\r\n\r\n\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)    \r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.state = {\r\n      account: '', //contract deployer account[0]\r\n      token: {}, //Deployed instance of FUN contract in ROPSTEN\r\n      ethSwap: {}, //Deployed instance of Swap contract in ROPSTEN\r\n      ethBalance: '0',\r\n      tokenBalance: '0',\r\n      loading: true,\r\n      walletLoaded: false,\r\n      txState : '',\r\n      web3Socket: {},\r\n      ethSwapWebSocket: {},\r\n      lastReceivedEvent: { 'Event' : 'no event'}      \r\n    }\r\n  }\r\n\r\n  async loadWallet() {    \r\n    this.setState({ loading: true })\r\n    await this.loadWeb3()\r\n    await this.loadBlockchainData()    \r\n    await this.loadEthSwapWebSocket();    \r\n\r\n    //subscribe to event TokenPurchased \r\n    await this.state.ethSwapWebSocket.events.TokensPurchased({})\r\n    .on('data', async (event) =>{\r\n        let amount = event.returnValues._value.toString()\r\n        window.alert('FUN Token purchased: ' + window.web3.utils.fromWei(amount, 'Ether'))\r\n        console.log('FUN TokenPurchase tx confirmed \\n')\r\n        console.log('From account: ', event.returnValues._from.toString())        \r\n        console.log('Amount in FUN: ', window.web3.utils.fromWei(amount, 'Ether') )\r\n        this.setState({ lastReceivedEvent : event.returnValues})\r\n        console.log(event.returnValues)    \r\n    })\r\n    .on('error', (error) => {\r\n      this.setState({ lastReceivedEvent : error})\r\n      console.log(error);\r\n    })\r\n    \r\n    //subscribe to event TokenSold\r\n    await this.state.ethSwapWebSocket.events.TokensSold({})\r\n    .on('data', async (event) =>{\r\n        let amount = event.returnValues._value.toString()\r\n        window.alert('FUN Token Sold: ' + window.web3.utils.fromWei(amount, 'Ether'))\r\n        console.log('FUN TokenPurchase tx confirmed \\n')\r\n        console.log('From account: ', event.returnValues._from.toString())        \r\n        console.log('Amount in FUN: ', window.web3.utils.fromWei(amount, 'Ether') )\r\n        this.setState({ lastReceivedEvent : event.returnValues})\r\n        console.log(event.returnValues)        \r\n    })\r\n    .on('error', (error) => {\r\n      this.setState({ lastReceivedEvent : error});\r\n      console.log(error);\r\n    }) \r\n\r\n    this.setState({ loading: false });   \r\n\r\n  }\r\n\r\n  //Load Swap instance via infura webSocket API\r\n  async loadEthSwapWebSocket(){\r\n    const URL = `wss://ropsten.infura.io/ws/v3/70aea16e9abe4d19a5726cb041c174b4`\r\n    let web3Socket = new Web3(new Web3.providers.WebsocketProvider(URL));\r\n    \r\n    if (web3Socket){      \r\n      const web3 = window.web3\r\n      const networkId =  await web3.eth.net.getId()\r\n      const ethSwapWebSocketData = Swap.networks[networkId]\r\n      if(ethSwapWebSocketData) {\r\n        const ethSwapWebSocket = await new web3Socket.eth.Contract(Swap.abi, ethSwapWebSocketData.address)\r\n        this.setState({ ethSwapWebSocket })\r\n      } else {\r\n        window.alert('Swap contract not deployed to detected network.')\r\n      }    \r\n    } else{\r\n      window.alert('Could not establish web socket connection to infura')\r\n    }     \r\n  }\r\n\r\n  //Load Swap and FUN token instances via Metamask web3\r\n  async loadBlockchainData() {\r\n    const web3 = window.web3  \r\n    const accounts = await web3.eth.getAccounts()\r\n    this.setState({ account: accounts[0] })\r\n    console.log(this.state.account)\r\n    \r\n    \r\n    const ethBalance = await web3.eth.getBalance(this.state.account)\r\n    this.setState({ ethBalance })\r\n\r\n    // Load FUN Token\r\n    const networkId =  await web3.eth.net.getId()\r\n    const tokenData = Token.networks[networkId]\r\n    if(tokenData) {\r\n      const token = new web3.eth.Contract(Token.abi, tokenData.address)\r\n      this.setState({ token })\r\n      let tokenBalance = await token.methods.balanceOf(this.state.account).call()\r\n      this.setState({ tokenBalance: tokenBalance.toString() })\r\n      console.log(\"FUN Token address: \", tokenData.address)\r\n    } else {\r\n      window.alert('Token contract not deployed to detected network.')\r\n    }\r\n\r\n    // Load Swap\r\n    const ethSwapData = await Swap.networks[networkId]\r\n    if(ethSwapData) {\r\n      const ethSwap = new web3.eth.Contract(Swap.abi, ethSwapData.address)\r\n      this.setState({ ethSwap })\r\n      console.log('ethSwap.options.address:' + this.state.ethSwap.options.address)      \r\n    } else {\r\n      window.alert('Swap contract not deployed to detected network.')\r\n    }    \r\n  }  \r\n  \r\n  async loadWeb3() {\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum);\r\n      //window.web3 = new Web3(\"http://localhost:8545\")\r\n      //window.web3 = new Web3(new Web3.providers.WebsocketProvider('ws://localhost:8545'))\r\n      await window.ethereum.enable();\r\n      await window.ethereum.on('accountsChanged', async () => {\r\n        const accounts = await window.web3.eth.getAccounts();            \r\n        this.setState({ account: accounts[0] })       \r\n      })\r\n      this.setState({walletLoaded : true});      \r\n    }\r\n    else {\r\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\r\n      this.setState({walletLoaded : false});      \r\n    }\r\n    \r\n  } \r\n\r\n  buyTokens = async (etherAmount) => {\r\n    this.setState({ loading: true })\r\n    await this.state.ethSwap.methods.buyTokens().send({ value: etherAmount, from: this.state.account })\r\n      .on('transactionHash', (hash) => {\r\n        this.setState({ txState: 'onTxHash' })\r\n      })\r\n      .on('confirmation', async (confirmationNumber, receipt) =>{        \r\n        this.setState({ txState: 'onConfirmation' })\r\n        const web3 = window.web3  \r\n        const ethBalance = await web3.eth.getBalance(this.state.account)        \r\n        let tokenBalance = await this.state.token.methods.balanceOf(this.state.account).call()\r\n        this.setState({ \r\n          ethBalance : ethBalance ,\r\n          tokenBalance: tokenBalance.toString() ,           \r\n         })\r\n        console.log(\"BuyTokens.on.Confirmation: ConfirmationNumber: \" + confirmationNumber + \" -> Receip.events: \" + JSON.stringify(receipt))\r\n      })\r\n    this.setState({\r\n      txState: '',\r\n      loading: false\r\n      })    \r\n  }\r\n  \r\n  resetBuy = async () =>{\r\n    let amount = Swap.ammount.call()\r\n    console.log(\"this.state.ethSwap.address: \" + this.state.ethSwap.address)\r\n    this.setState({ loading: true })\r\n    await this.state.token.methods.approve(this.state.ethSwap.options.address, 1000000).send({ from: this.state.account })\r\n    .on('transactionHash', async (hash) => {\r\n        this.setState({ txState: 'onTxHash' })\r\n        await this.state.ethSwap.methods.sellTokens(amount).send({ from: this.state.account })        \r\n        .on('transactionHash', (hash) => {\r\n          this.setState({ txState: 'onTxHash' })\r\n          })\r\n        .on('confirmation', async (confirmationNumber, receipt) =>{      \r\n          this.setState({ txState: 'onConfirmation' })\r\n          const web3 = window.web3  \r\n          const ethBalance = await web3.eth.getBalance(this.state.account)\r\n          let tokenBalance = await this.state.token.methods.balanceOf(this.state.account).call()\r\n          this.setState({ \r\n            ethBalance : ethBalance ,\r\n            tokenBalance: tokenBalance.toString() ,             \r\n          })\r\n          console.log(\"SellTokens.on.Confirmation: ConfirmationNumber: \" + confirmationNumber + \" -> Receip.events: \" + JSON.stringify(receipt))\r\n        })\r\n    this.setState({\r\n      loading: false ,\r\n      txState: '' })        \r\n    })\r\n  }\r\n\r\n  sellTokens = async (tokenAmount) => {\r\n    console.log(\"this.state.ethSwap.address: \" + this.state.ethSwap.address)\r\n    this.setState({ loading: true })\r\n    await this.state.token.methods.approve(this.state.ethSwap.options.address, tokenAmount).send({ from: this.state.account })\r\n    .on('transactionHash', async (hash) => {\r\n        this.setState({ txState: 'onTxHash' })\r\n        await this.state.ethSwap.methods.sellTokens(tokenAmount).send({ from: this.state.account })        \r\n        .on('transactionHash', (hash) => {\r\n          this.setState({ txState: 'onTxHash' })\r\n          })\r\n        .on('confirmation', async (confirmationNumber, receipt) =>{      \r\n          this.setState({ txState: 'onConfirmation' })\r\n          const web3 = window.web3  \r\n          const ethBalance = await web3.eth.getBalance(this.state.account)\r\n          let tokenBalance = await this.state.token.methods.balanceOf(this.state.account).call()\r\n          this.setState({ \r\n            ethBalance : ethBalance ,\r\n            tokenBalance: tokenBalance.toString() ,             \r\n          })\r\n          console.log(\"SellTokens.on.Confirmation: ConfirmationNumber: \" + confirmationNumber + \" -> Receip.events: \" + JSON.stringify(receipt))\r\n        })\r\n    this.setState({\r\n      loading: false ,\r\n      txState: '' })        \r\n    })\r\n  }\r\n\r\n  async handleClick(){       \r\n      if (!this.state.walletLoaded) {\r\n          await this.loadWallet();\r\n      } else {            \r\n        this.setState({walletLoaded : false}); ;\r\n      }      \r\n      console.log('TypeOf: ', typeof this.state.lastReceivedEvent)\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    let content;    \r\n    if (this.state.walletLoaded){\r\n      if(this.state.loading) {\r\n        let txStatus;\r\n        switch(this.state.txState){\r\n          case 'onTxHash':\r\n            txStatus = 'Transaction Hash received from Deployed network...';\r\n          \r\n            break;\r\n          case 'onConfirmation':\r\n            txStatus = 'Confirmation received from Deployed network...';\r\n            \r\n            break;\r\n          case 'onReceipt':\r\n            txStatus = 'Tx receipt received from Deployed network. See console logs...';\r\n            break;\r\n          case 'onError':\r\n            txStatus = 'Tx error received from Deployed network. Tx reverted...';\r\n            break;\r\n          default :\r\n            txStatus = '' ;\r\n        }\r\n        content = <div>\r\n          <p id=\"loader\" className=\"text-center\">Loading...</p>\r\n          <br/>\r\n          <p className='tx'>{txStatus}</p>\r\n        </div>\r\n      }else {\r\n        const events = this.state.lastReceivedEvent;\r\n        content = \r\n        <div className=\"row\" style={{\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\"\r\n              }}\r\n        >\r\n          <div className=\"col-md-6\">\r\n            <Main\r\n              ethBalance={this.state.ethBalance}\r\n              tokenBalance={this.state.tokenBalance}\r\n              buyTokens={this.buyTokens}\r\n              resetBuy={this.resetBuy}\r\n              sellTokens={this.sellTokens}\r\n            />            \r\n          </div>          \r\n          <div className=\"col-md-6\" >\r\n            <LoadWallet handleClick={this.handleClick} walletLoaded={this.state.walletLoaded} />  \r\n            <br/>\r\n            Last event received from Network:\r\n            <ul>\r\n            {Object.keys(events).map((event, index) => <li key={index}>{event} : {events[event]}</li>)}\r\n            </ul>           \r\n          </div>\r\n        </div>  \r\n      }\r\n    }\r\n    else {\r\n      content = <div style={{ alignItems: \"center\" }}>\r\n        <div className=\"container\" >\r\n        <h3>Welcome</h3>\r\n         <ul>\r\n         <li><h5>Click the button below to connect Metamask wallet.</h5></li>\r\n         <li><h5>Don't forget to select \"Ropsten Test Network\" in Metamask App.</h5></li>                      \r\n         <li><h5>If you don´t own Ether on Ropsten you can request it for free at https://faucet.ropsten.be/.</h5></li>        \r\n        </ul>   \r\n        <LoadWallet handleClick={this.handleClick} walletLoaded={this.state.walletLoaded} />\r\n        </div>\r\n      </div>\r\n\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Navbar account={this.state.account}/>\r\n        <div className=\"container-fluid mt-5\">\r\n          <div className=\"row\">\r\n            <main role=\"main\" className=\"col-lg-12 ml-auto mr-auto\" style={{ maxWidth: '1000px' }}>\r\n              <div className=\"content mr-auto ml-auto\">\r\n                <a\r\n                  href=\"Chris_Lytrokapis\"\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                >\r\n                </a>\r\n\r\n                {content}\r\n                console.log(Web3.version);\r\n              </div>\r\n            </main>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}