{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Chris Lytrokapis\\\\Desktop\\\\Dev\\\\Projects\\\\Swapper\\\\client\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport TokenX from \"./contracts/TokenX.json\";\nimport Swap from \"./contracts/Swap.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loaded: false\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        this.web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        this.accounts = await this.web3.eth.getAccounts(); // Get the contract instance.\n\n        this.networkId = await this.web3.eth.getChainId();\n        this.TokenX = new this.web3.eth.Contract(TokenX.abi, TokenX.networks[this.networkId] && TokenX.networks[this.networkId].address);\n        this.Swap = new this.web3.eth.Contract(Swap.abi, Swap.networks[this.networkId] && Swap.networks[this.networkId].address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          loaded: true\n        }, this.runExample);\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n  }\n\n  render() {\n    if (!this.state.loaded) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"Swap For Titans\"), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"tokenInput\",\n      value: this.state.tokenInput,\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.handleSumbit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Add Ether You want to swap\"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"Swap\"), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"tokenInput\",\n      value: this.state.tokenInput,\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.handleSumbit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"Token to be swapped\"));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Chris Lytrokapis/Desktop/Dev/Projects/Swapper/client/src/App.js"],"names":["React","Component","TokenX","Swap","getWeb3","App","state","loaded","componentDidMount","web3","accounts","eth","getAccounts","networkId","getChainId","Contract","abi","networks","address","setState","runExample","error","alert","console","render","tokenInput","handleInputChange","handleSumbit"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,OAAOC,OAAP,MAAoB,WAApB;AAGA,OAAO,WAAP;;AAEA,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BK,KAD0B,GAClB;AAAEC,MAAAA,MAAM,EAAG;AAAX,KADkB;;AAAA,SAG1BC,iBAH0B,GAGN,YAAY;AAC9B,UAAI;AACF;AACA,aAAKC,IAAL,GAAY,MAAML,OAAO,EAAzB,CAFE,CAIF;;AACA,aAAKM,QAAL,GAAgB,MAAM,KAAKD,IAAL,CAAUE,GAAV,CAAcC,WAAd,EAAtB,CALE,CAOF;;AACA,aAAKC,SAAL,GAAiB,MAAM,KAAKJ,IAAL,CAAUE,GAAV,CAAcG,UAAd,EAAvB;AAEA,aAAKZ,MAAL,GAAc,IAAI,KAAKO,IAAL,CAAUE,GAAV,CAAcI,QAAlB,CACZb,MAAM,CAACc,GADK,EAEZd,MAAM,CAACe,QAAP,CAAgB,KAAKJ,SAArB,KAAmCX,MAAM,CAACe,QAAP,CAAgB,KAAKJ,SAArB,EAAgCK,OAFvD,CAAd;AAMA,aAAKf,IAAL,GAAY,IAAI,KAAKM,IAAL,CAAUE,GAAV,CAAcI,QAAlB,CACVZ,IAAI,CAACa,GADK,EAEVb,IAAI,CAACc,QAAL,CAAc,KAAKJ,SAAnB,KAAiCV,IAAI,CAACc,QAAL,CAAc,KAAKJ,SAAnB,EAA8BK,OAFrD,CAAZ,CAhBE,CAsBF;AACA;;AACA,aAAKC,QAAL,CAAc;AAAEZ,UAAAA,MAAM,EAAE;AAAV,SAAd,EAAgC,KAAKa,UAArC;AACD,OAzBD,CAyBE,OAAOC,KAAP,EAAc;AACd;AACAC,QAAAA,KAAK,0EAAL;AAGAC,QAAAA,OAAO,CAACF,KAAR,CAAcA,KAAd;AACD;AACF,KApCyB;AAAA;;AAwC1BG,EAAAA,MAAM,GAAG;AACP,QAAI,CAAC,KAAKlB,KAAL,CAAWC,MAAhB,EAAwB;AACtB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDAAP;AACD;;AACD,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,EAEE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,YAAxB;AAAqC,MAAA,KAAK,EAAE,KAAKD,KAAL,CAAWmB,UAAvD;AAAmE,MAAA,QAAQ,EAAE,KAAKC,iBAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,OAAO,EAAE,KAAKC,YAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,EAKE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,YAAxB;AAAqC,MAAA,KAAK,EAAE,KAAKrB,KAAL,CAAWmB,UAAvD;AAAmE,MAAA,QAAQ,EAAE,KAAKC,iBAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,EAME;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,OAAO,EAAE,KAAKC,YAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BANF,CADF;AAWD;;AAvDyB;;AA0D5B,eAAetB,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport TokenX from \"./contracts/TokenX.json\";\nimport Swap from \"./contracts/Swap.json\";\nimport getWeb3 from \"./getWeb3\";\n\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { loaded : false };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      this.web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      this.accounts = await this.web3.eth.getAccounts();\n\n      // Get the contract instance.\n      this.networkId = await this.web3.eth.getChainId();\n      \n      this.TokenX = new this.web3.eth.Contract(\n        TokenX.abi,\n        TokenX.networks[this.networkId] && TokenX.networks[this.networkId].address,\n\n      )\n\n      this.Swap = new this.web3.eth.Contract(\n        Swap.abi,\n        Swap.networks[this.networkId] && Swap.networks[this.networkId].address,\n        \n      )\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ loaded: true }, this.runExample);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  \n\n  render() {\n    if (!this.state.loaded) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Swap For Titans</h1>\n        <input type=\"text\" name=\"tokenInput\" value={this.state.tokenInput} onChange={this.handleInputChange}/>\n        <button type=\"button\" onClick={this.handleSumbit}>Add Ether You want to swap</button>\n        <h2>Swap</h2>\n        <input type=\"text\" name=\"tokenInput\" value={this.state.tokenInput} onChange={this.handleInputChange}/>\n        <button type=\"button\" onClick={this.handleSumbit}>Token to be swapped</button>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}